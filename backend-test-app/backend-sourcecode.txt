package pgfsd.testapp.configuration;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.servlet.config.annotation.CorsRegistry;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;

@Configuration
public class MVCConfiguration {
    @Bean
    public WebMvcConfigurer corsConfigurer() {
        return new WebMvcConfigurer() {
            @Override
            public void addCorsMappings(CorsRegistry registry) {
                registry.addMapping("/**").allowedOrigins("*");
            }
        };
    }
}
package pgfsd.testapp.configuration;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.crypto.password.NoOpPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;

@Configuration
public class SecurityConfiguration {

    @Bean
    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
        http
                .csrf().disable()
                .authorizeRequests()
                .antMatchers("/**").permitAll();
        return http.build();
    }

    @Bean
    public PasswordEncoder passwordEncoder() {
        return NoOpPasswordEncoder.getInstance();
    }
}package pgfsd.testapp.controllers;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import pgfsd.testapp.Dto.PostTestReqDto;
import pgfsd.testapp.entities.Test;
import pgfsd.testapp.services.TestService;

@RestController
@RequestMapping("/api/test")
public class TestController {

    @Autowired
    private TestService testService;

    @PostMapping()
    Long postTest(@Validated @RequestBody PostTestReqDto testReqDto) {
        return this.testService.addTest(testReqDto.getTest());
    }

    @GetMapping()
    Test getRandomTest() {
        return this.testService.getRandomTest();
    }

    @GetMapping("/{id}")
    Test getTestById(@PathVariable Long id) {
        return this.testService.getTestById(id);
    }
}
package pgfsd.testapp.Dto;


import lombok.Data;
import pgfsd.testapp.entities.Test;

import javax.validation.constraints.NotNull;

@Data
public class PostTestReqDto {
    @NotNull
    private Test test;
}
package pgfsd.testapp.entities;

import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

import javax.persistence.*;
import javax.validation.constraints.NotNull;

@AllArgsConstructor
@NoArgsConstructor
@Getter
@Setter
@Entity
@Table(name = "answer")
public class Answer {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "id", nullable = false)
    private Long id;
    @NotNull
    private String text;
    @NotNull
    private Boolean correct;
}package pgfsd.testapp.entities;

import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

import javax.persistence.*;
import javax.validation.constraints.NotNull;
import java.util.Set;

@NoArgsConstructor
@AllArgsConstructor
@Getter
@Setter
@Entity
@Table(name = "question")
public class Question {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "id", nullable = false)
    private Long id;
    @NotNull
    private String text;
    @NotNull
    @OneToMany(cascade = CascadeType.ALL)
    private Set<Answer> answers;
}package pgfsd.testapp.entities;

import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

import javax.persistence.*;
import javax.validation.constraints.NotNull;
import java.util.Set;

@NoArgsConstructor
@AllArgsConstructor
@Getter
@Setter
@Entity
@Table(name = "test")
public class Test {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "id", nullable = false)
    private Long id;
    @NotNull
    private String text;
    @OneToMany(cascade = CascadeType.ALL)
    private Set<Question> questions;
}package pgfsd.testapp.repositories;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import pgfsd.testapp.entities.Test;

import java.util.List;
import java.util.Optional;

public interface TestRepository extends JpaRepository<Test, Long> {

    Test save(Test test);

    Optional<Test> findById(Long id);

    List<Test> findAll();

    @Query("SELECT t FROM Test t")
    Page<Test> findRandomTest(Pageable pageable);

    long count();


}
package pgfsd.testapp.services;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.PageRequest;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import pgfsd.testapp.entities.Test;
import pgfsd.testapp.repositories.TestRepository;

import java.util.Optional;

@Service
public class TestService {

    @Autowired
    private TestRepository testRepository;


    @Transactional
    public Long addTest(Test test) {
        Test savedTest = testRepository.save(test);
        if (savedTest == null) {
            throw new IllegalStateException("Test not saved");
        }
        return savedTest.getId();
    }

    @Transactional
    public Test getRandomTest() {
        int randomIndex = (int) Math.floor(testRepository.count() * Math.random());
        Test test = testRepository
                .findRandomTest(PageRequest.of(randomIndex, 1))
                .getContent()
                .get(0);
        if (test == null) {
            throw new IllegalStateException("Random test could not be found");
        }
        return test;
    }

    @Transactional
    public Test getTestById(Long id) {
        Optional<Test> test = this.testRepository.findById(id);
        if (test.isEmpty()) {
            throw new IllegalStateException("Test with given id could not be found");
        }
        return test.get();
    }
}
package pgfsd.testapp;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class TestAppApplication {

    public static void main(String[] args) {
        SpringApplication.run(TestAppApplication.class, args);
    }

}
spring.datasource.url=jdbc:mysql://localhost:3306/testapp
spring.datasource.username=root
spring.datasource.password=test1234
spring.jpa.show-sql=true
spring.jpa.database-platform=org.hibernate.dialect.MySQL8Dialect
spring.jpa.hibernate.ddl-auto=update
spring.datasource.driverClassName=com.mysql.cj.jdbc.Driver
logging.level.org.springframework.security=DEBUG